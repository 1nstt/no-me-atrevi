services:
  # Nginx como proxy inverso
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/ssl  # Monta tus certificados SSL aqu√≠
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  frontend:
    build:
      context: ./no-me-atrevi-a-decirtelo
      dockerfile: Dockerfile
    # Solo exponer internamente, no al host
    expose:
      - "5000"
    volumes:
      - ./no-me-atrevi-a-decirtelo:/app
      - /app/node_modules
    networks:
      - app-network
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # Solo exponer internamente, no al host
    expose:
      - "3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network

  mongo: #Servidor de base de datos
    image: mongo:latest
    container_name: mongo-nma
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongo_data:/data/db # Volumen gestionado por docker =! carpeta en local mapeada
    networks:
      - app-network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express-nma
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_BASICAUTH: "false"
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - mongo # Se usa el nombre del servicio
    networks:
      - app-network

# Definir la red para que todos los servicios se comuniquen
networks:
  app-network:
    driver: bridge

volumes:
  mongo_data: 